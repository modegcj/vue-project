ES6新增的数组方法：
1.Array.from()方法
let json = {
  '0':'hello',
  '1':'123',
  '2':'panda',
  length:3
}
let arr = Array.from(json);
console.log(arr);  //["hello","123","panda"]

2.Array.of()方法 --将一组值转变为数组
let arr = Array.of(1,2,33,5);
console.log(arr);  //[1,2,33,5]

3.find()方法
let arr = [1,2,3,5,7];
console.log(arr.find((value,index,arrr)=>{
  return value > 5
}))   //7

4.fill()方法  --使用fill()方法给定值填充数组
fill方法用于空数组的初始化很方便：new Array(3).fill(7); //[7,7,7]
fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置:
let arr = [0,1,2,3,4,5,6,7];
arr.fill('error',2,3);
console.log(arr); //[0,1,"error",3,4,5,6,7]

5.遍历数组的方法：entries()、values()、keys()
这三个方法都是返回一个遍历器对象，可用for...of循环遍历，唯一区别：keys()是对键名的遍历、values()对键值的遍历、entries()是对键值对的遍历。
for(let item of ['a','b'].keys()){
  console.log(item); //0   //1
}
for(let item of ['a','b'].values()){
  console.log(item);//a    //b
}
let arr = [0,1];
for(let item of arr.entries()){
  console.log(item);//[0,0]   //[1,1]
}
for(let [index,item] of arr4.entries()){
  console.log(index+":"+item);//0:0   //1:1
}
如果不用for...of进行遍历，可用使用next()方法手动跳到下一个值。
let arr =['a','b','c'];
let entries = arr.entries();
console.log(entries.next().value);//[0, "a"]
console.log(entries.next().value);//[1, "b"]
console.log(entries.next().value);//[2, "c"]
console.log(entries.next().value);//undefined
6.Array.every()
array.every(function(currentValue,index,arr),thisValue)
every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。
every() 方法使用指定函数检测数组中的所有元素：
如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。
如果所有元素都满足条件，则返回 true。
注意： every() 不会对空数组进行检测。
注意： every() 不会改变原始数组。
7.Array.come()
array.some(function(currentValue,index,arr),thisValue)
some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。
some() 方法会依次执行数组的每个元素：
如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。
如果没有满足条件的元素，则返回false。
注意： some() 不会对空数组进行检测。
注意： some() 不会改变原始数组。


ES6新增字符串的方法
1.includes()返回布尔值，表示是否找到了参数字符串，第二个参数表示从第几个位置开始
2.startsWith()返回布尔值，表示参数字符串是否在源字符串的头部，第二个参数表示从第几个位置开始
3.endsWith()返回布尔值，表示参数字符串是否在源字符串的尾部，* 第二个参数是针对前几个字符串
4.repeat()参数给多少，字符串就重复多少次
5.padStart()第一个参数是限制字符串的长度，第二个要补的内容
6.padEnd()结尾处补充
7.字符串模板
   let a = 'a';
   let b = 'b';
   console.log(`${a}${b}c`)
   变量用${}包起来
8.标签模板
   function str(str,v1,v2){}
   str`aaa${a}${b}c`
   这个写法就相当于把这个字符串传到了function里，里面的参数第一个是纯字符串(被变量隔开后，以数组形式展示），
   从第二个开始就是字符串里的变量了，有几个变量后面就有几个参数


ES6 Set和Map
Set
ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。
Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。
// 例一
var set = new Set([1, 2, 3, 4, 4]);
[...set]
// [1, 2, 3, 4]
var s = new Set();
[2, 3, 5, 4, 5, 2, 2].map(x => s.add(x));
for (let i of s) {
  console.log(i);
}
// 2 3 5 4
在Set内部，两个NaN是相等。两个对象总是不相等的。可以用length来检测
四个操作方法：
add(value)：添加某个值，返回Set结构本身。
delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
has(value)：返回一个布尔值，表示该值是否为Set的成员。
clear()：清除所有成员，没有返回值
set内部的元素可以遍历for...of...
weakset
WeakSet结构与Set类似，也是不重复的值的集合。
WeakSet和Set的区别：
WeakSet的成员只能是对象，而不能是其他类型的值
WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于WeakSet之中。这个特点意味着，无法引用WeakSet的成员，因此WeakSet是不可遍历的。

Map
Map结构提供了“值—值”的对应，是一种更完善的Hash结构实现。如果你需要“键值对”的数据结构，Map比Object更合适。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。
var m = new Map();
var o = {p: "Hello World"};
m.set(o, "content")
m.get(o) // "content"
m.has(o) // true
m.delete(o) // true
m.has(o) // false
注意，只有对同一个对象的引用，Map结构才将其视为同一个键。这一点要非常小心。
var map = new Map();
map.set(['a'], 555);
map.get(['a']) // undefined
上面代码的set和get方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此get方法无法读取该键，返回undefined。
如果Map的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map将其视为一个键，包括0和-0。另外，虽然NaN不严格相等于自身，但Map将其视为同一个键。
实例属性和方法：size(只能用于对象，获取元素个数)、set、get、has、delete、clear
遍历方法：keys（）、values（）、entries（）、forEach（）
