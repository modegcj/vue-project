cnpm install -g vue-cli
vue init webpack {{项目名}}

@vue-cli 3.0
中文文档：https://cli.vuejs.org/zh/guide/ 
使用router：vue add router
使用vuex：vue add vuex
<!--
安装:
cnpm insatll -g @vue/cli
新建项目
vue create my-project
项目启动
cnpm run serve
打包
cnpm run build

细节的配置询问:
TypeScript:
是否使用class风格的组件语法：Use class-style component syntax?
是否使用babel做转义：Use Babel alongside TypeScript for auto-detected polyfills?
CSS Pre-processors:
选择CSS预处理类型：Pick a CSS pre-processor
Linter / Formatter
选择Linter / Formatter规范类型：Pick a linter / formatter config
选择lint方式，保存时检查/提交时检查：Pick additional lint features
Texting:
选择Unit测试方式
选择E2E测试方式
选择Babel,PostCSS,ESLint等自定义配置的存放位置Where do you prefer placing config for Babel,PostCSS,ESLint,etc?
vue.config.js自定义配置
vue.config.js完整默认配置
module.exports = {
  //基本路径
  baseUrl:'/',
  //输出文件目录
  outputDir:'dist',
  // eslint-loader是否在保存的时候检查
  lintOnSave:true,
  //use the full build with in-browser compiler?
  //https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only
  compiler:false,
  //webpack配置
  //see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md
  chainWebpack:()=>{},
  configureWebpack:()=>{},
  //vue-loader 配置项
  //https://vue-loader.vuejs.org/en/options.html
  vueLoader:{},
  //生产环境是否生成sourceMap文件
  productionSourceMap:true,
  //css相关配置
  css:{
    //是否使用css分离插件ExtractTextPlugin
    extract:true,
    //开启CSS source maps?
    sourceMap:false,
    //css预设器配置项
    loaderOptions:{},
    //启动CSS modules for all css / pre-processor files
    modules: false
  },
  //use thread-loader for babel & TS in production build
  //enabled by default if the machine has more than 1 cores
  parallel:require('os').cpus().length > 1,
  //是否启用dll
  //See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode
  dll:false,
  // PWA插件相关配置
  // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa
  pwa:{},
  //webpack-dev-server相关配置
  devServer:{
    open:process.platform === 'darwin',
    host:'0.0.0.0',
    port:8080,
    https:false,
    hotOnly:false,
    proxy:null,
    before:app => {}
  },
  //第三方插件配置
  pluginOptions:{
    //...
  }
}

设置代理
#string
module.exports = {
  devServer: {
    proxy: '<url>'
  }
}
#Object
module.export = {
  devServer:{
    proxy: {
      '/api': {
        target:'<url>',
        ws: true,
        changeOrigin: true
      },
      '/foo': {
        target: '<other_url>'
      }
    }
  }
}

启用dll
启用dll后，我们的动态库文件每次打包生成的vendor的[chunkhash]值就会一样，其值可以是true/false,也可以制定特定的代码库。
module.exports = {
  dll: true
}
module.exports = {
  dll: [
    'dep-a',
    'dep-b/some/nested/file.js'
  ]
}

静态资源路径
相对路径
>静态资源路径已@开头代表<projectRoot>/src
>静态资源路径已~开头，可以引入node modules内的资源
public文件夹里的静态资源引用
#在 public/index.html中引用静态资源
<%= webpackConfig.output.publicPath %>
<link rel="shortcut icon" href="<%= webpackConfig.output.publicPath %>favicon.ico" rel="external nofollow">
#vue templates中，需要在date中定义baseUrl
<template>
  <img :src="`${baseUrl}my-image.png`">
</template>
<script>
  data(){
    return{
      baseUrl: process.env.BASE_URL
    }
  }
</script>
webpack配置修改
用webpack-chain修改webpack相关配置（强烈建议先熟悉webpack-chain和vue-cli源码）
对模块处理配置
//vue.config.js
module.exports={
  chainWebpack: config => {
    config.module
      .rule('js')
        .include
          .add(/some-module-to-transpile/)  //要处理的模块
  }
}
修改webpack Loader配置
//vue.config.js
module.exports = {
  chainWebpack: config => {
    config.module
      .rule('scss')
        .use('sass-loader')
          .tap(options => 
            merge(options,{
              includePaths: [path.resolve(__dirname,'node_modules')],
      })      
    )
  }
}
修改webpack Plugin配置
//vue.config.js
module.exports = {
  chainWebpack: config => {
    config
      .plugin('html')
        .tap(args => {
          return[/* new args to pass to html-webpack- */]
    })
  }
}
eg:在本次项目较小，只对uglifyis进行了少量的修改，后期如果还有配置上优化会继续添加。
chainWebpack: confif => {
  if(process.env.NODE_ENV === "production"){
    config
      .plugin('uglify')
      .tap([options] => {
        //去除console.log
        return [Object.assign(options,{
          uglifyOptions: { compress: {
            drop_console: true,
            pure_funcs: ['console.log']
          }}
        })]
      })
  }
}
全局变量的设置
在项目根目录创建以下项目：
.env  #在所有环节中执行
.env.local  #在所有环境中执行，git会ignored
.env.[mode]  #只在特定环境执行([mode]可以是"development","production" or "test")
.env.[mode].local  #在特定环境执行，git会ignored
.env.development  #只在生产环境执行
.env.production  #只在开发环境执行
在文件里配置键值对
# 键名须以VUE_App开头
VUE_APP_SECRET = secret
在项目中访问:
console.log(process.env.VUE_APP_SECENT)
这样项目中的process.env.VUE_APP_SECENT就会被secrent所替代。
-->

